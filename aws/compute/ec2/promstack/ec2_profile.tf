resource "aws_iam_role_policy" "this" {
  name = "${var.env}-promstack"
  role = aws_iam_role.this.id

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:*",
        "acm:ListCertificates",
        "cloudfront:*",
        "iam:ListRoles",
        "iam:ListServerCertificates",
        "iam:PassRole",
        "iam:CreateServiceLinkedRole",
        "waf:ListWebACLs",
        "waf:GetWebACL",
        "wafv2:ListWebACLs",
        "wafv2:GetWebACL",
        "kinesis:ListStreams",
        "kinesis:DescribeStream",
        "ec2:*",
        "elasticloadbalancing:*",
        "cloudwatch:*",
        "autoscaling:*",
        "cloudformation:DescribeChangeSet",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:GetTemplate",
        "cloudformation:ListStackResources",
        "cloudwatch:*",
        "cognito-identity:ListIdentityPools",
        "cognito-sync:GetCognitoEvents",
        "cognito-sync:SetCognitoEvents",
        "dynamodb:*",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "events:*",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListAttachedRolePolicies",
        "iam:ListRolePolicies",
        "iam:ListRoles",
        "iam:PassRole",
        "iot:AttachPrincipalPolicy",
        "iot:AttachThingPrincipal",
        "iot:CreateKeysAndCertificate",
        "iot:CreatePolicy",
        "iot:CreateThing",
        "iot:CreateTopicRule",
        "iot:DescribeEndpoint",
        "iot:GetTopicRule",
        "iot:ListPolicies",
        "iot:ListThings",
        "iot:ListTopicRules",
        "iot:ReplaceTopicRule",
        "kinesis:DescribeStream",
        "kinesis:ListStreams",
        "kinesis:PutRecord",
        "kms:ListAliases",
        "lambda:*",
        "logs:*",
        "s3:*",
        "sns:ListSubscriptions",
        "sns:ListSubscriptionsByTopic",
        "sns:ListTopics",
        "sns:Publish",
        "sns:Subscribe",
        "sns:Unsubscribe",
        "sqs:ListQueues",
        "sqs:SendMessage",
        "tag:GetResources",
        "xray:PutTelemetryRecords",
        "xray:PutTraceSegments",
        "lambda:CreateFunction",
        "lambda:TagResource",
        "lambda:ListVersionsByFunction",
        "lambda:PublishLayerVersion",
        "lambda:DeleteProvisionedConcurrencyConfig",
        "iam:CreateRole",
        "s3:ListBucket",
        "lambda:InvokeAsync",
        "lambda:GetFunctionConfiguration",
        "cloudformation:CreateChangeSet",
        "ecr:UploadLayerPart",
        "serverlessrepo:CreateCloudFormationTemplate",
        "lambda:UntagResource",
        "lambda:PutFunctionConcurrency",
        "lambda:ListProvisionedConcurrencyConfigs",
        "cloudformation:DescribeStackEvents",
        "lambda:DeleteLayerVersion",
        "ecr:CompleteLayerUpload",
        "lambda:PutFunctionEventInvokeConfig",
        "lambda:DeleteFunctionEventInvokeConfig",
        "lambda:DeleteFunction",
        "cloudformation:DescribeChangeSet",
        "cloudformation:ExecuteChangeSet",
        "ecr:BatchCheckLayerAvailability",
        "serverlessrepo:CreateCloudFormationChangeSet",
        "lambda:InvokeFunction",
        "ecr:GetDownloadUrlForLayer",
        "lambda:ListAliases",
        "lambda:UpdateFunctionConfiguration",
        "cloudformation:GetTemplateSummary",
        "serverlessrepo:CreateApplicationVersion",
        "cloudformation:DescribeStacks",
        "ecr:PutImage",
        "lambda:UpdateAlias",
        "lambda:UpdateFunctionCode",
        "lambda:ListFunctionEventInvokeConfigs",
        "lambda:PutProvisionedConcurrencyConfig",
        "ecr:BatchGetImage",
        "lambda:DeleteAlias",
        "lambda:PublishVersion",
        "lambda:DeleteFunctionConcurrency",
        "ecr:InitiateLayerUpload",
        "s3:GetBucketLocation",
        "lambda:CreateAlias",
        "iam:ListPolicies",
        "iam:PassRole",
        "codeartifact:*",
        "s3:ListAllMyBuckets",
        "lambda:ListFunctions",
        "serverlessrepo:CreateApplication",
        "lambda:ListEventSourceMappings",
        "ecr:GetAuthorizationToken",
        "lambda:ListLayerVersions",
        "lambda:ListLayers",
        "cloudformation:CreateChangeSet",
        "sts:GetServiceBearerToken",
        "s3:PutObject",
        "s3:GetObject",
        "ecr:GetDownloadUrlForLayer",
        "lambda:PublishLayerVersion",
        "ecr:BatchGetImage",
        "s3:ListBucket",
        "s3:DeleteObject",
        "ecr:BatchCheckLayerAvailability",
        "lambda:CreateFunction",
        "lambda:TagResource",
        "lambda:InvokeFunction",
        "lambda:ListVersionsByFunction",
        "lambda:ListAliases",
        "lambda:UpdateFunctionConfiguration",
        "s3:CreateBucket",
        "lambda:InvokeAsync",
        "lambda:GetFunctionConfiguration",
        "lambda:UntagResource",
        "lambda:PutFunctionConcurrency",
        "lambda:UpdateAlias",
        "lambda:UpdateFunctionCode",
        "lambda:ListFunctionEventInvokeConfigs",
        "lambda:ListProvisionedConcurrencyConfigs",
        "lambda:DeleteLayerVersion",
        "lambda:DeleteAlias",
        "lambda:PutFunctionEventInvokeConfig",
        "lambda:DeleteFunctionEventInvokeConfig",
        "lambda:DeleteFunction",
        "lambda:PublishVersion",
        "lambda:DeleteFunctionConcurrency",
        "s3:DeleteBucket",
        "lambda:CreateAlias",
        "secretsmanager:GetResourcePolicy",
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret",
        "secretsmanager:ListSecretVersionIds"
      ],
      "Resource": "*"
    }
  ]
}
EOF  
}

resource "aws_iam_role" "this" {
  name = "${var.env}-promstack"
  path = "/"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_instance_profile" "this" {
  name = "${var.env}-promstack"
  role = aws_iam_role.this.name
}
